# Pip Installation Command---
pip install Flask SQLAlchemy lxml


# Uploading File Code---
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from lxml import etree
import os

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'xml'}
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///people.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Person(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    email = db.Column(db.String(120), nullable=False)

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'age': self.age,
            'email': self.email
        }

# Ensure the upload directory exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify(error='No file part'), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify(error='No selected file'), 400
    if file and allowed_file(file.filename):
        filename = file.filename
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        try:
            # Parse XML and save to database
            tree = etree.parse(filepath)
            root = tree.getroot()
            for person in root.findall('person'):
                name = person.find('name').text
                age = int(person.find('age').text)
                email = person.find('email').text
                new_person = Person(name=name, age=age, email=email)
                db.session.add(new_person)
            db.session.commit()
            return jsonify(message='File successfully uploaded and data saved'), 200
        except Exception as e:
            return jsonify(error=str(e)), 500
    else:
        return jsonify(error='File type not allowed'), 400

@app.route('/people', methods=['GET'])
def get_people():
    people = Person.query.all()
    return jsonify([person.to_dict() for person in people]), 200

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)


# XML File Demo---
<people>
    <person>
        <name>John Doe</name>
        <age>30</age>
        <email>johndoe@example.com</email>
    </person>
    <person>
        <name>Jane Doe</name>
        <age>25</age>
        <email>janedoe@example.com</email>
    </person>
</people>
